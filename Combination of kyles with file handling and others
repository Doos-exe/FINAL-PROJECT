#include <iostream>
#include <queue>
#include <list>
#include <stack>
#include <map>
#include <fstream>
#include <string>
#include <limits>
#include <windows.h>
using namespace std;

struct Customer {
    int customerID;
    string name;
    string address;
};

struct Video {
    int videoID;
    string title;
    string genre;
    string production;
    int numberOfCopies;
};

class CustomerADT {
public:
    queue<Customer> customers;
    int nextCustomerID;

    CustomerADT() : nextCustomerID(1) {}

    void addCustomer(const string& name, const string& address) {
        Customer newCustomer = {nextCustomerID++, name, address};
        customers.push(newCustomer);
        system("cls");

        cout << "Customer added successfully!\n";
        cout << "Customer ID: " << newCustomer.customerID << endl;
        cout << "Name       : " << newCustomer.name << endl;
        cout << "Address    : " << newCustomer.address << '\n' << endl;
    }

    void showCustomerDetails(int customerID) {
        queue<Customer> tempQueue = customers;
        bool found = false;

        while (!tempQueue.empty()) {
            Customer current = tempQueue.front();
            tempQueue.pop();
            if (current.customerID == customerID) {
                system("cls");
                cout << "Customer Details\n";
                cout << "Customer ID: " << current.customerID << "\n";
                cout << "Name: " << current.name << "\n";
                cout << "Address: " << current.address << "\n";
                system("pause");
                cout << "\n";
                found = true;
                break;
            }
        }

        if (!found) {
            system("cls");
            cout << "\nCustomer not found!\n\n";
            Sleep(500);
        }
    }

    void updateNextCustomerID() {
        int maxID = 0;
        queue<Customer> tempQueue = customers;
        while (!tempQueue.empty()) {
            Customer current = tempQueue.front();
            tempQueue.pop();
            if (current.customerID > maxID) {
                maxID = current.customerID;
            }
        }
        nextCustomerID = maxID + 1;
    }

    void saveNewCustomerToFile() {
        ofstream outfile("customers.txt");
        if (outfile.is_open()) {
            queue<Customer> tempQueue = customers;
            while (!tempQueue.empty()) {
                Customer current = tempQueue.front();
                tempQueue.pop();
                outfile << current.customerID << " " << current.name << "," << current.address << endl;
            }
            outfile.close();
        }
    }

    void loadCustomersFromFile() {
        ifstream infile("customers.txt");
        if (infile.is_open()) {
            int id;
            string name, address;
            while (infile >> id >> ws && getline(infile, name, ',') && getline(infile, address)) {
                customers.push({id, name, address});
            }
            infile.close();
            updateNextCustomerID();
        }
    }
};

class VideoADT {
public:
    list<Video> videos;
    int nextVideoID;

    VideoADT() : nextVideoID(1) {}

    void addVideo(const string& title, const string& genre, const string& production, int numberOfCopies) {
        Video newVideo = {nextVideoID++, title, genre, production, numberOfCopies};
        videos.push_back(newVideo);
        system("cls");

        cout << "Video added successfully!\n";
        cout << "Video ID      : " << newVideo.videoID << endl;
        cout << "Title         : " << newVideo.title << endl;
        cout << "Genre         : " << newVideo.genre << endl;
        cout << "Production    : " << newVideo.production << endl;
        cout << "No. of Copies : " << newVideo.numberOfCopies << '\n' << endl;
    }

    void showVideoDetails(int videoID) {
        bool found = false;
        for (const auto& video : videos) {
            if (video.videoID == videoID) {
                system("cls");
                cout << "Video Details\n";
                cout << "Video ID      : " << video.videoID << "\n";
                cout << "Title         : " << video.title << "\n";
                cout << "Genre         : " << video.genre << "\n";
                cout << "Production    : " << video.production << "\n";
                cout << "No. of Copies : " << video.numberOfCopies << "\n";
                system("pause");
                cout << "\n";
                found = true;
                break;
            }
        }
        if (!found) {
            system("cls");
            cout << "\nVideo not found!\n\n";
            Sleep(500);
        }
    }

    void updateNextVideoID() {
        int maxID = 0;
        for (const auto& video : videos) {
            if (video.videoID > maxID) {
                maxID = video.videoID;
            }
        }
        nextVideoID = maxID + 1;
    }

    void updateVideoCopies(int videoID, int change) {
        for (auto& video : videos) {
            if (video.videoID == videoID) {
                video.numberOfCopies += change;
                break;
            }
        }
    }

    void saveAllVideosToFile() {
        ofstream outfile("videos.txt");
        if (outfile.is_open()) {
            for (const auto& video : videos) {
                outfile << video.videoID << " " << video.title << "," << video.genre << "," << video.production << "," << video.numberOfCopies << endl;
            }
            outfile.close();
        }
    }

    void loadVideosFromFile() {
        ifstream infile("videos.txt");
        if (infile.is_open()) {
            int id, copies;
            string title, genre, production;
            while (infile >> id >> ws && getline(infile, title, ',') && getline(infile, genre, ',') && getline(infile, production, ',') && infile >> copies) {
                videos.push_back({id, title, genre, production, copies});
            }
            infile.close();
            updateNextVideoID();
        }
    }
};

class CustomerRentADT {
private:
    struct Rent {
        int customerID;
        stack<int> rentedVideoIDs;
    };
public:
    map<int, Rent> customerRentals;

    void rentVideo(int customerID, int videoID, VideoADT& videoADT) {
        for (auto& video : videoADT.videos) {
            if (video.videoID == videoID && video.numberOfCopies > 0) {
                customerRentals[customerID].customerID = customerID;
                customerRentals[customerID].rentedVideoIDs.push(videoID);
                video.numberOfCopies--;
                cout << "Video rented successfully!\n";
                return;
            }
        }
        cout << "No copies available for rent!\n";
    }

    void returnVideo(int customerID, int videoID, VideoADT& videoADT) {
        if (customerRentals.find(customerID) != customerRentals.end()) {
            stack<int> tempStack;
            bool videoFound = false;
            while (!customerRentals[customerID].rentedVideoIDs.empty()) {
                int top = customerRentals[customerID].rentedVideoIDs.top();
                customerRentals[customerID].rentedVideoIDs.pop();
                if (top == videoID) {
                    videoFound = true;
                } else {
                    tempStack.push(top);
                }
            }
            while (!tempStack.empty()) {
                customerRentals[customerID].rentedVideoIDs.push(tempStack.top());
                tempStack.pop();
            }
            if (videoFound) {
                for (auto& video : videoADT.videos) {
                    if (video.videoID == videoID) {
                        video.numberOfCopies++;
                        break;
                    }
                }
                cout << "Video returned successfully!\n";
            } else {
                cout << "The customer did not rent this video!\n";
            }
        } else {
            cout << "Customer not found!\n";
        }
    }

    void printRentedVideos(int customerID, const queue<Customer>& customers) {
        bool customerExists = false;
        queue<Customer> tempQueue = customers;
        while (!tempQueue.empty()) {
            if (tempQueue.front().customerID == customerID) {
                customerExists = true;
                break;
            }
            tempQueue.pop();
        }

        if (customerExists) {
            if (customerRentals.find(customerID) != customerRentals.end() && !customerRentals[customerID].rentedVideoIDs.empty()) {
                stack<int> tempStack = customerRentals[customerID].rentedVideoIDs;
                system("cls");
                cout << "List of Videos Rented by Customer ID: " << customerID << "\n";
                while (!tempStack.empty()) {
                    cout << "Video ID: " << tempStack.top() << "\n";
                    tempStack.pop();
                }
                system("pause");
            } else {
                system("cls");
                cout << "\nNo rented videos found for this customer.\n\n";
                Sleep(500);
            }
        } else {
            system("cls");
            cout << "\nCustomer not found!\n\n";
            Sleep(500);
        }
    }

    void saveCustomerRentalsToFile() {
        ofstream outfile("customer_rent.txt");
        if (outfile.is_open()) {
            for (const auto& pair : customerRentals) {
                outfile << pair.first << " ";
                stack<int> tempStack = pair.second.rentedVideoIDs;
                while (!tempStack.empty()) {
                    outfile << tempStack.top() << " ";
                    tempStack.pop();
                }
                outfile << endl;
            }
            outfile.close();
        }
    }

    void loadCustomerRentalsFromFile() {
        ifstream infile("customer_rent.txt");
        if (infile.is_open()) {
            int customerID, videoID;
            while (infile >> customerID) {
                Rent rent;
                rent.customerID = customerID;
                while (infile >> videoID && videoID != -1) {
                    rent.rentedVideoIDs.push(videoID);
                }
                customerRentals[customerID] = rent;
            }
            infile.close();
        }
    }
};

int main() {
    VideoADT videoADT;
    CustomerADT customerADT;
    CustomerRentADT customerRentADT;

    videoADT.loadVideosFromFile();
    customerADT.loadCustomersFromFile();
    customerRentADT.loadCustomerRentalsFromFile();

    int choice;
    do {
        cout << "----------------------\n";
        cout << "Video Rental System\n";
        cout << "----------------------\n";
        cout << "1. Add a new customer\n";
        cout << "2. Show customer details\n";
        cout << "3. Add a new video\n";
        cout << "4. Show video details\n";
        cout << "5. Rent a video\n";
        cout << "6. Return a video\n";
        cout << "7. Print list of videos rented by a customer\n";
        cout << "8. Exit Program\n";
        cout << "----------------------\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1: {
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            string name, address;
            cout << "Enter customer name: ";
            getline(cin, name);
            cout << "Enter customer address: ";
            getline(cin, address);
            customerADT.addCustomer(name, address);
            customerADT.saveNewCustomerToFile();
            break;
        }
        case 2: {
            int customerID;
            cout << "Enter customer ID: ";
            cin >> customerID;
            customerADT.showCustomerDetails(customerID);
            break;
        }
        case 3: {
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            string title, genre, production;
            int numberOfCopies;
            cout << "Enter video title: ";
            getline(cin, title);
            cout << "Enter video genre: ";
            getline(cin, genre);
            cout << "Enter video production: ";
            getline(cin, production);
            cout << "Enter number of copies: ";
            cin >> numberOfCopies;
            videoADT.addVideo(title, genre, production, numberOfCopies);
            videoADT.saveAllVideosToFile();
            break;
        }
        case 4: {
            int videoID;
            cout << "Enter video ID: ";
            cin >> videoID;
            videoADT.showVideoDetails(videoID);
            break;
        }
        case 5: {
            int customerID, videoID;
            cout << "Enter customer ID: ";
            cin >> customerID;
            cout << "Enter video ID: ";
            cin >> videoID;
            customerRentADT.rentVideo(customerID, videoID, videoADT);
            videoADT.saveAllVideosToFile();
            customerRentADT.saveCustomerRentalsToFile();
            break;
        }
        case 6: {
            int customerID, videoID;
            cout << "Enter customer ID: ";
            cin >> customerID;
            cout << "Enter video ID: ";
            cin >> videoID;
            customerRentADT.returnVideo(customerID, videoID, videoADT);
            videoADT.saveAllVideosToFile();
            customerRentADT.saveCustomerRentalsToFile();
            break;
        }
        case 7: {
            int customerID;
            cout << "Enter customer ID: ";
            cin >> customerID;
            customerRentADT.printRentedVideos(customerID, customerADT.customers);
            break;
        }
        case 8: {
            videoADT.saveAllVideosToFile();
            customerADT.saveNewCustomerToFile();
            customerRentADT.saveCustomerRentalsToFile();
            cout << "Exiting program...\n";
            break;
        }
        default:
            cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 8);

    return 0;
}
